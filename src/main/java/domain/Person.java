package domain;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import java.io.Serial;
import java.io.Serializable;

@Entity
public class Person implements Serializable {

    @Serial
    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
    private String name;
    private String email;

    public Person() {
    }

    public Person(Integer id, String name, String email) {
        this.id = id;
        this.name = name;
        this.email = email;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Override
    public String toString() {
        return "Person, id = " + id + ", name = " + name + " , email = " + email;
    }
}

/*
Explanation:

1. The Person class represents a domain entity that will be persisted in the database.
2. The @Entity annotation indicates that this class is an entity that should be mapped to a database table.
3. The @Id annotation specifies that the id field is the primary key for the entity.
4. The @GeneratedValue annotation with the strategy GenerationType.IDENTITY indicates that the id value will be automatically generated by the database.
5. The private Integer id; represents the primary key of the Person entity.
6. The private String name; represents the name of the person.
7. The private String email; represents the email of the person.
8. The default constructor public Person() {} is required by JPA.
9. The parameterized constructor public Person(Integer id, String name, String email) allows creating a Person object with the specified values.
10. Getter and setter methods are provided for the id, name, and email fields.
11. The @Override annotation indicates that the toString() method is overridden to provide a custom string representation of the Person object.

Overall, this code defines the Person entity class with the necessary annotations and fields to be persisted in a database using JPA.
 */

